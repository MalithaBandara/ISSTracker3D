// Create a WorldWindow for the canvas.
/*

var wwd = new WorldWind.WorldWindow("canvasOne");

wwd.addLayer(new WorldWind.BMNGOneImageLayer());
wwd.addLayer(new WorldWind.BMNGLandsatLayer());
wwd.addLayer(new WorldWind.CoordinatesDisplayLayer(wwd));
wwd.addLayer(new WorldWind.ViewControlsLayer(wwd));

// Add a placemark
var placemarkLayer = new WorldWind.RenderableLayer();
wwd.addLayer(placemarkLayer);

var placemarkAttributes = new WorldWind.PlacemarkAttributes(null);

placemarkAttributes.imageOffset = new WorldWind.Offset(
    WorldWind.OFFSET_FRACTION, 0.3,
    WorldWind.OFFSET_FRACTION, 0.0);

placemarkAttributes.labelAttributes.offset = new WorldWind.Offset(
    WorldWind.OFFSET_FRACTION, 0.5,
    WorldWind.OFFSET_FRACTION, 1.0);

placemarkAttributes.imageSource = WorldWind.configuration.baseUrl + "images/pushpins/plain-red.png";

var position = new WorldWind.Position(55.0, -106.0, 100.0);
var placemark = new WorldWind.Placemark(position, false, placemarkAttributes);

placemark.label = "Placemark\n" +
    "Lat " + placemark.position.latitude.toPrecision(4).toString() + "\n" +
    "Lon " + placemark.position.longitude.toPrecision(5).toString();
placemark.alwaysOnTop = true;

placemarkLayer.addRenderable(placemark);

// Add a polygon
var polygonLayer = new WorldWind.RenderableLayer();
wwd.addLayer(polygonLayer);

var polygonAttributes = new WorldWind.ShapeAttributes(null);
polygonAttributes.interiorColor = new WorldWind.Color(0, 1, 1, 0.75);
polygonAttributes.outlineColor = WorldWind.Color.BLUE;
polygonAttributes.drawOutline = true;
polygonAttributes.applyLighting = true;

var boundaries = [];
boundaries.push(new WorldWind.Position(20.0, -75.0, 700000.0));
boundaries.push(new WorldWind.Position(25.0, -85.0, 700000.0));
boundaries.push(new WorldWind.Position(20.0, -95.0, 700000.0));

var polygon = new WorldWind.Polygon(boundaries, polygonAttributes);
polygon.extrude = true;
polygonLayer.addRenderable(polygon);


// Add a COLLADA model
/* var modelLayer = new WorldWind.RenderableLayer();
wwd.addLayer(modelLayer);

var position = new WorldWind.Position(10.0, -125.0, 800000.0);
var config = {dirPath: './Models/'};
var colladaLoader = new WorldWind.ColladaLoader(position, config);

colladaLoader.load("duck.dae", function (colladaModel) {
    colladaModel.scale = 9000;
    modelLayer.addRenderable(colladaModel);
    alert("Rendering done");
}); */


/*

var modelLayer = new WorldWind.RenderableLayer("Duck");
wwd.addLayer(modelLayer);
var position = new WorldWind.Position(10.0, -125.0, 800000.0);
var colladaLoader = new WorldWind.ColladaLoader(position);
colladaLoader.init({dirPath: 'https://malithabandara.github.io/FlappyBird/Build/ISS/'});
colladaLoader.load('ISS.dae', function (scene) {
    
    scene.scale = 300000;
    modelLayer.addRenderable(scene);
    alert("Rendering done");
});

// Add WMS imagery
var serviceAddress = "https://neo.sci.gsfc.nasa.gov/wms/wms?SERVICE=WMS&REQUEST=GetCapabilities&VERSION=1.3.0";
var layerName = "MOD_LSTD_CLIM_M";

var createLayer = function (xmlDom) {
    var wms = new WorldWind.WmsCapabilities(xmlDom);
    var wmsLayerCapabilities = wms.getNamedLayer(layerName);
    var wmsConfig = WorldWind.WmsLayer.formLayerConfiguration(wmsLayerCapabilities);
    var wmsLayer = new WorldWind.WmsLayer(wmsConfig);
    wwd.addLayer(wmsLayer);
};

var logError = function (jqXhr, text, exception) {
    console.log("There was a failure retrieving the capabilities document: " +
        text +
    " exception: " + exception);
};

//$.get(serviceAddress).done(createLayer).fail(logError);

*/

//Fetching Location of the ISS
const tle = `ISS (ZARYA)
1 25544U 98067A   17206.18396726  .00001961  00000-0  36771-4 0  9993
2 25544  51.6400 208.9163 0006317  69.9862  25.2906 15.54225995 67660`;
const { getLatLngObj } = require("tle.js/dist/tlejs.cjs");
const optionalTimestampMS = 1502342329860;
const latLonObj = getLatLngObj(tle, optionalTimestampMS);

console.log(getLatLngObj(tle));

      //create past and future orbit on click
      var startOrbit;
      var createOrbit = function (index) {
        endOrbit();
        startOrbit = window.setInterval(function () {
          var orbitRange = $('#orbitEvent').jqxSlider('value');
          var orbitRangePast = $('#orbitEvent2').jqxSlider('value');
          var timeSlide = $('#timeEvent').jqxSlider('value');

          orbitsLayer.removeAllRenderables();
          var now = new Date();
          var pastOrbit = [];
          var futureOrbit = [];
          for (var i = -orbitRangePast; i <= orbitRange; i++) {
            var time = new Date(now.getTime() + (i * 60000) + (timeSlide * 60000));
            try {
              var position = getPosition(satellite.twoline2satrec(satData[index].TLE_LINE1, satData[index].TLE_LINE2), time);
            } catch (err) {
              console.log(err + ' in createOrbit, sat ' + index);
              continue;
            }

            if (i <= 0) {
              pastOrbit.push(position);
            }
            if (i >= 0) {
              futureOrbit.push(position);
            }
          }

          // Orbit Path
          var pastOrbitPathAttributes = new WorldWind.ShapeAttributes(null);
          pastOrbitPathAttributes.outlineColor = WorldWind.Color.RED;
          pastOrbitPathAttributes.interiorColor = new WorldWind.Color(1, 0, 0, 0.5);

          var futureOrbitPathAttributes = new WorldWind.ShapeAttributes(null);//pastAttributes
          futureOrbitPathAttributes.outlineColor = WorldWind.Color.GREEN;
          futureOrbitPathAttributes.interiorColor = new WorldWind.Color(0, 1, 0, 0.5);

          //plot orbit on click
          var pastOrbitPath = new WorldWind.Path(pastOrbit);
          pastOrbitPath.altitudeMode = WorldWind.RELATIVE_TO_GROUND;
          pastOrbitPath.attributes = pastOrbitPathAttributes;
          pastOrbitPath.useSurfaceShapeFor2D = true;


          var futureOrbitPath = new WorldWind.Path(futureOrbit);
          futureOrbitPath.altitudeMode = WorldWind.RELATIVE_TO_GROUND;
          futureOrbitPath.attributes = futureOrbitPathAttributes;
          futureOrbitPath.useSurfaceShapeFor2D = true;

          orbitsLayer.addRenderable(pastOrbitPath);
          orbitsLayer.addRenderable(futureOrbitPath);
        });
      };
      var endOrbit = function () {
        clearInterval(startOrbit);
        orbitsLayer.removeAllRenderables();
      };